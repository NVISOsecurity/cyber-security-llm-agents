{
    "ID": "caldera_agent",
    "role": "Caldera Agent",
    "goal": "Interact with the Caldera API to extract information & perform actions on the Caldera platform. NEVER invent data as part of your answer, only use the data provided by the API.",
    "backstory": "You are an agent responsible for interacting with a remote computer through the Caldera API. You need to run commands on the system in order to reach certain Red Teaming objectives.",
    "tools": [
        "caldera_execute_command_on_agent_tool",
        "website_search_tool"
    ],
    "tasks": [
        {
            "ID": "simulate_user_action_task",
            "description": "User powershell to perform an action on the system that resembles the actions of an accountant. Run commands like using a browser, creating files, etc. Please get creative and do not use test names like 'test.txt' or 'test.xlsx' but names that look realistic. If you create a file, make sure to only place them in C:/temp.",
            "expected_output": "The output of the command with a summarized analysis. Clearly indicate if the command was successfully executed or not."
        },
        {
            "ID": "caldera_search_abilities_by_MITRE_technique_task",
            "description": "Extract a filtered list of all abilities relevant for the MITRE techniques IDs that were from the previous steps.",
            "expected_output": "A list of ability names, MITRE ID, ability IDs and Descriptions. Do NOT include the full JSON, just those three fields."
        },
        {
            "ID": "caldera_detect_edr_task",
            "description": "Run powershell to to get a unique list of all the running processes using Get-Process | Sort-Object Name | Select-Object -Unique Name. Based on this, verify which (if any) EDR agents are part of this list by checking the names of the running processes. It's impossible that no processes are running, so if that's the case, something went wrong running the command. Only use built-in commands available in Windows on a default installation of a Workstation.",
            "expected_output": "A conclusion on which (if any) EDR products are running on the endpoint. Summary using the product name, not the name of the process, so if you see for example 'elastic' in the process list, you should say 'Elastic Endpoint Security' is running."
        },
        {
            "ID": "caldera_kill_edr",
            "description": "Run powershell to kill the EDR that was identified in the previous step. If no EDR agent was identified, then you should not run this task. If the command was not successfully executed, you should not run this task. If the command was successfully executed, you should run this task.",
            "expected_output": "The output of the command with a summarized analysis. Clearly indicate if the command was successfully executed or not."
        },
        {
            "ID": "caldera_check_permissions_task",
            "description": "Run powershell to verify if we are running as admin or not.",
            "expected_output": "A conclusion on whether the current user is running as an admin or not."
        },
        {
            "ID": "human_input_task",
            "description": "The tool we want to use in the next tasks is called nanodump. Documentation is at https://raw.githubusercontent.com/fortra/nanodump/main/README.md. The name of the payload is nanondump.x64.exe",
            "expected_output": "The link to the documentation page and the name of the payload."
        },
        {
            "ID": "lookup_tool_documentation_on_github_task",
            "description": "Use the web search tool to look up the documentation for tool mentioned in the previous task.",
            "expected_output": "The output with a clear overview of all the command line options available for the tool. Do not include the full documentation, only the command line options that are available, with a short explanation of each option."
        },
        {
            "ID": "caldera_download_payload_task",
            "description": "Run powershell to download the payload from http://192.168.162.11:8000/payloads/ to C:/temp, and validate if the downloaded executable exists to ensure download was successful by chaining the download with a Test-Path command, but ALWAYS wait 5 seconds before running the Test-Path command, this is very important. Do NOT try the same commands that you ran before, by analyzeing the task history, if one is present in the backstory. If the file does not exist, the command was not successfully executed. ALWAYS combine the file download & the Test-Path check in a single command. Try to get creative in how you download the payload, as we are running this as part of an authorized Red Team, and we want to bypass EDR detections.",
            "expected_output": "The output of the command with a summarized analysis. Clearly indicate if the command was successfully executed or not."
        },
        {
            "ID": "caldera_execute_payload_task",
            "description": "Use PowerShell to execute 'c:\temp\nanodump.x64.exe'. Look up the right command line arugments to use to successfully write the output to a dump file in the C:\temp directory. Avoid reading LSASS directly. You are ONLY successfull if you managed to successfully write the output to a dump file using the Caldera API.",
            "expected_output": "The output of the command with a summarized analysis. Clearly indicate if the command was successfully executed or not"
        },
        {
            "ID": "caldera_verify_success_task",
            "description": "Run powershell to verify if the previous step was successfully executed or not",
            "expected_output": "A summary of the success or failure of the previous step."
        },
        {
            "ID": "caldera_dump_lsass",
            "description": "Run powershell to dump credentials from lsass. You are allowed to download & run files using powershell, get creative please.",
            "expected_output": "The output of the command with a summarized analysis. Clearly indicate if the command was successfully executed or not. Be very strict on this: if the output shows for example instructions on how to use pwoershell, or any exit code that indicates non successfull execution, then your answer should be that the command was not successfully executed. If the command output is empty, then you should also indicate that the command was not successfully executed."
        },
        {
            "ID": "caldera_execute_more_task",
            "description": "Use PowerShell to run the proposed python script to extract the secrets.",
            "expected_output": "The output of the command with a summarized analysis. Clearly indicate if the command was successfully executed or not"
        },
        {
            "ID": "download_mimikatz_task",
            "description": "Use powershell to download the latest release of mimikatz to C:\temp. Look for the right URL to download by seaching on the relases page of the github repository. Then send a command to Caldera to download the latest release to the C:/temp folder",
            "expected_output": "The output of the command with a summarized analysis. Clearly indicate if the command was successfully executed or not."
        }
    ]
}